name: Train on Vast AI

on:
  workflow_dispatch:
    inputs:
      subpackage:
        description: Subpackage used as root
        default: LightningNowcastingConvLSTM
        required: true
      gpu_name:
        description: GPU used
        type: choice
        options: ['970', 'A10', 'A100_PCIE', 'A100_SXM4', 'A100X', 'A30', 'A40', 'A800_PCIE', 'GH200_SXM', 'GTX_1050_Ti', 'GTX_1060', 'GTX_1070', 'GTX_1070_Ti', 'GTX_1080', 'GTX_1080_Ti', 'GTX_1650', 'GTX_1660', 'GTX_1660_S', 'GTX_1660_Ti', 'H100_NVL', 'H100_PCIE', 'H100_SXM', 'H200', 'L4', 'L40', 'L40S', 'P106_100', 'Q_RTX_6000', 'Q_RTX_8000', 'Quadro_K2200', 'Quadro_K620', 'Radeon_Pro_VII', 'Radeon_VII', 'RTX_2060', 'RTX_2060S', 'RTX_2070', 'RTX_2070S', 'RTX_2080', 'RTX_2080S', 'RTX_2080_Ti', 'RTX_3060', 'RTX_3060_laptop', 'RTX_3060_Ti', 'RTX_3070', 'RTX_3070_laptop', 'RTX_3070_Ti', 'RTX_3080', 'RTX_3080_Ti', 'RTX_3090', 'RTX_3090_Ti', 'RTX_4000Ada', 'RTX_4060', 'RTX_4060_Ti', 'RTX_4070', 'RTX_4070S', 'RTX_4070S_Ti', 'RTX_4070_Ti', 'RTX_4080', 'RTX_4080S', 'RTX_4090', 'RTX_4090D', 'RTX_5000Ada', 'RTX_6000Ada', 'RTX_A2000', 'RTX_A4000', 'RTX_A4500', 'RTX_A5000', 'RTX_A6000', 'Tesla_P100', 'Tesla_T4', 'Tesla_V100', 'Titan_V', 'Titan_Xp']
        default: "RTX_3090"
      image_name:
        description: Image to be used
        default: "glcr.b-data.ch/julia/ver:1.10.6"
      hyperparameter_k_h:
        description: Kernel size hidden to hidden
        default: "5"
      hyperparameter_k_x:
        description: Kernel size input to hidden
        default: "5"
      hyperparameter_hidden:
        description: "# of hidden channels per layer"
        default: "[64, 32, 32]"
      hyperparameter_eta:
        description: Eta for the Optimiser
        default: "3e-3"
      hyperparameter_batchsize:
        description: Minibatch size
        default: "16"
      hyperparameter_use_bias:
        description: Bias term per layer
        default: "[true, false, false]"
      extra_hyperparameters:
        description: Extra hyperparameters in JSON format
        default: '{"n_steps": 20, "seed": 42, "rho": 0.9, "mode": "conditional"}'

env:
  TMUX_SESSION_NAME: "train"

jobs:
  hyperparameters:
    runs-on: [self-hosted, persistent]
    outputs:
      hyperparameters: ${{ steps.hyperparameters.outputs.hyperparameters }}
    steps:
      - id: hyperparameters
        run: |
          echo '${{ toJSON(inputs) }}'
          hyperparameters=$(echo '${{ toJSON(inputs) }}' | jq -cr 'with_entries(select(.key | startswith("hyperparameter_")) | .key |= sub("^hyperparameter_"; ""))')
          final_hyperparameters=$(echo ${hyperparameters} '${{ inputs.extra_hyperparameters }}' | jq -crs add)
          echo "$final_hyperparameters"
          echo "hyperparameters=$final_hyperparameters" >> "$GITHUB_OUTPUT"
  create_instance:
    permissions: write-all
    runs-on: [self-hosted, persistent]
    needs: hyperparameters
    timeout-minutes: 15
    outputs:
      instance_id: ${{ steps.launch.outputs.instance_id }}
      data_url: ${{ steps.data.outputs.data_url }}
      gpu_info: ${{ steps.gpu_info.outputs.gpu_info }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: |
          pip install vastai==0.2.6
      - name: Prepare
        run: ./scripts/prepare.sh
        working-directory: lib/${{ inputs.subpackage }}
      - name: Get Runner Token
        id: get_runner_token
        run: |
          token=$(gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/runners/registration-token | jq -r .token)
          echo "runner_token=$token" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
      - name: Launch Instance
        id: launch
        run: python scripts/train.py LAUNCH_INSTANCE
        env:
          VAST_GPU_NAME: ${{ inputs.gpu_name }}
          VAST_IMAGE: ${{ inputs.image_name }}
          VAST_API_KEY: ${{ secrets.VAST_API_KEY }}
          REPO_NAME: ${{ github.repository }}
          SUBPACKAGE: ${{ inputs.subpackage }}
          
          ENV_REPO_NAME: ${{ github.repository }}
          ENV_SUBPACKAGE: ${{ inputs.subpackage }}
          ENV_GITHUB_ACTIONS_TOKEN: ${{ env.runner_token }}
          ENV_GITHUB_REPOSITORY: ${{ github.repository }}
          ENV_TMUX_SESSION_NAME: ${{ env.TMUX_SESSION_NAME }}
      - name: Copy Data
        id: data
        run: |
          tar -czf data.tar.gz -C ./lib/${{ inputs.subpackage }} data
          key=$(curl -F "file=@data.tar.gz" https://file.io | jq -r .key)
          echo "data_url=https://file.io/$key" >> "$GITHUB_OUTPUT"
      - name: Wait until ready
        id: wait
        run: python scripts/train.py WAIT_INSTANCE
        env:
          INSTANCE_ID: ${{ steps.launch.outputs.instance_id }}
          VAST_API_KEY: ${{ secrets.VAST_API_KEY }}
      - name: Get GPU info
        id: gpu_info
        run: |
          info=$(vastai show instance ${{ steps.launch.outputs.instance_id }} --raw --api-key=${{ secrets.VAST_API_KEY }} | jq -cr 'with_entries(select(.key | startswith("gpu")))')
          echo "gpu_info=$info" >> "$GITHUB_OUTPUT"
  train:
    runs-on: [self-hosted, gpu]
    needs: [create_instance, hyperparameters]
    timeout-minutes: 1440 # 1 day
    outputs:
      finished: ${{ steps.train.outputs.finished }}
    steps:
      - uses: actions/checkout@v4
      - name: Prepare (Download data and instantiate Julia)
        run: |
          curl -o data.tar.gz ${{ needs.create_instance.outputs.data_url }} &
          (cd lib/${{ inputs.subpackage }} && julia --project=. -e 'import Pkg; Pkg.instantiate()') &
          wait
          tar -xzf data.tar.gz
          cp  --no-clobber -r ./data/* lib/${{ inputs.subpackage }}/data
          tree -hau -L 4 lib/${{ inputs.subpackage }}/data
      - name: Install Packages
        run: julia --project=. -e 'import Pkg; Pkg.instantiate()'
        working-directory: lib/${{ inputs.subpackage }}
      - name: Run Training
        run: ./scripts/train.sh
        working-directory: lib/${{ inputs.subpackage }}
        env:
          MLFLOW_TRACKING_URI: http://mlflow.marcovela.com:6969/api
          MLFLOW_TRACKING_USERNAME: lightning
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_PASSWORD }}
          REPOSITORY_URL: https://github.com/${{ github.repository }}.git
          GPU_INFO: ${{ needs.create_instance.outputs.gpu_info }}
          TRAIN_HYPERPARAMETERS: ${{ needs.hyperparameters.outputs.hyperparameters }}
  cleanup:
    runs-on: [self-hosted, persistent]
    needs: [create_instance, train]
    if: always()
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Destroy instance
        run: |
          pip install vastai==0.2.6
          vastai destroy instance "${{ needs.create_instance.outputs.instance_id }}" --api-key=${{ secrets.VAST_API_KEY }}
