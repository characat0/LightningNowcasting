name: Train on Vast AI

on:
  workflow_dispatch:
    inputs:
      subpackage:
        description: Subpackage used as root
        required: true
      gpu_name:
        description: GPU used
        default: "RTX_3090"
      image_name:
        description: Image to be used
        default: "glcr.b-data.ch/julia/ver:1.10.6"

jobs:
  create_instance:
    permissions: write-all
    runs-on: [self-hosted, persistent]
    outputs:
      instance_id: ${{ steps.launch.outputs.instance_id }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: |
          pip install vastai==0.2.6
      - name: Prepare
        run: cd lib/${{ inputs.subpackage }} && chmod +x ./scripts/prepare.sh && type ./scripts/prepare.sh && ./scripts/prepare.sh
      - name: Get Runner Token
        id: get_runner_token
        run: |
          token=$(gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/runners/registration-token | jq -r .token)
          echo "runner_token=$token" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
      - name: Launch Instance
        id: launch
        run: python scripts/train.py LAUNCH_INSTANCE
        env:
          VAST_GPU_NAME: ${{ inputs.gpu_name }}
          VAST_IMAGE: ${{ inputs.image_name }}
          VAST_API_KEY: ${{ secrets.VAST_API_KEY }}
          REPO_NAME: ${{ github.repository }}
          SUBPACKAGE: ${{ inputs.subpackage }}
          
          ENV_REPO_NAME: ${{ github.repository }}
          ENV_MLFLOW_PASSWORD: ${{ secrets.MLFLOW_PASSWORD }}
          ENV_SUBPACKAGE: ${{ inputs.subpackage }}
          ENV_MLFLOW_TRACKING_URI: http://mlflow.marcovela.com:6969/api
          ENV_MLFLOW_TRACKING_USERNAME: lightning
          ENV_GITHUB_ACTIONS_TOKEN: ${{ env.runner_token }}
      - name: Copy Data
        run: |
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N "" <<< y
          cat ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          vastai attach ssh ${{ steps.launch.outputs.instance_id }} "$(cat ~/.ssh/id_rsa.pub)" --api-key=${{ secrets.VAST_API_KEY }}
          ssh_url=$(vastai ssh-url ${{ steps.launch.outputs.instance_id }} --api-key=${{ secrets.VAST_API_KEY }})
          host=$(echo $ssh_url | sed -E 's|ssh://([^@]+)@([^:]+):([0-9]+)|\2|')
          port=$(echo $ssh_url | sed -E 's|ssh://([^@]+)@([^:]+):([0-9]+)|\3|')
          ssh-keyscan -p ${port} ${host} >> ~/.ssh/known_hosts
          ssh -T -o StrictHostKeyChecking=no ${ssh_url} 'echo "SSH connection successful!"' || \
            sleep 10 && ssh -T -o StrictHostKeyChecking=no ${ssh_url} 'echo "SSH connection successful!"' || \
            sleep 20 && ssh -T -o StrictHostKeyChecking=no ${ssh_url} 'echo "SSH connection successful!"'
          vastai copy ./lib/${{ inputs.subpackage }}/data ${{ steps.launch.outputs.instance_id }}:/opt/data --api-key=${{ secrets.VAST_API_KEY }}

  train:
    runs-on: [self-hosted, gpu]
    needs: create_instance
    steps:
      - uses: actions/checkout@v4
      - run: |
          cp --no-clobber -r /opt/data ./data
          chmod +x ./scripts/train.sh && ./scripts/train.sh
        working-directory: lib/${{ inputs.subpackage }}

  cleanup:
    runs-on: [self-hosted, persistent]
    needs: [train, create_instance]
    if: always()
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Destroy instance
        run: |
          pip install vastai==0.2.6
          vastai destroy instance "${{ needs.create_instance.outputs.instance_id }}" --api-key=${{ secrets.VAST_API_KEY }}

