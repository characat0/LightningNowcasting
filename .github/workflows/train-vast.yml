name: Train on Vast AI

on:
  workflow_dispatch:
    inputs:
      subpackage:
        description: Subpackage used as root
        default: LightningNowcastingConvLSTM
        required: true
      gpu_name:
        description: GPU used
        default: "RTX_3090"
      image_name:
        description: Image to be used
        default: "glcr.b-data.ch/julia/ver:1.10.6"

env:
  TMUX_SESSION_NAME: "train"

jobs:
  create_instance:
    permissions: write-all
    runs-on: [self-hosted, persistent]
    timeout-minutes: 5
    outputs:
      instance_id: ${{ steps.launch.outputs.instance_id }}
      data_url: ${{ steps.data.outputs.data_url }}
      gpu_info: ${{ steps.gpu_info.outputs.gpu_info }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: |
          pip install vastai==0.2.6
      - name: Prepare
        run: cd lib/${{ inputs.subpackage }} && chmod +x ./scripts/prepare.sh && type ./scripts/prepare.sh && ./scripts/prepare.sh
      - name: Get Runner Token
        id: get_runner_token
        run: |
          token=$(gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/runners/registration-token | jq -r .token)
          echo "runner_token=$token" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
      - name: Launch Instance
        id: launch
        run: python scripts/train.py LAUNCH_INSTANCE
        env:
          VAST_GPU_NAME: ${{ inputs.gpu_name }}
          VAST_IMAGE: ${{ inputs.image_name }}
          VAST_API_KEY: ${{ secrets.VAST_API_KEY }}
          REPO_NAME: ${{ github.repository }}
          SUBPACKAGE: ${{ inputs.subpackage }}
          
          ENV_REPO_NAME: ${{ github.repository }}
          ENV_SUBPACKAGE: ${{ inputs.subpackage }}
          ENV_GITHUB_ACTIONS_TOKEN: ${{ env.runner_token }}
          ENV_GITHUB_REPOSITORY: ${{ github.repository }}
          ENV_TMUX_SESSION_NAME: ${{ env.TMUX_SESSION_NAME }}
      - name: Get GPU info
        id: gpu_info
        run: |
          info=$(vastai show instance ${{ steps.launch.outputs.instance_id }} --raw --api-key=${{ secrets.VAST_API_KEY }} | jq -cr 'with_entries(select(.key | startswith("gpu")))')
          echo "gpu_info=$info" >> "$GITHUB_OUTPUT"
      - name: Copy Data
        id: data
        run: |
          tar -czf data.tar.gz -C ./lib/${{ inputs.subpackage }} data
          key=$(curl -F "file=@data.tar.gz" https://file.io | jq -r .key)
          echo "data_url=https://file.io/$key" >> "$GITHUB_OUTPUT"
  train:
    runs-on: [self-hosted, gpu]
    needs: create_instance
    outputs:
      finished: ${{ steps.train.finished }}
    steps:
      - uses: actions/checkout@v4
      - name: Download data
        run: |
          curl -o data.tar.gz ${{ needs.create_instance.outputs.data_url }}
          tar -xzf data.tar.gz
          cp  --no-clobber -r ./data/* lib/${{ inputs.subpackage }}/data
          tree -hau -L 4 lib/${{ inputs.subpackage }}/data
      - name: Install Packages
        run: julia --project=. -e 'import Pkg; Pkg.instantiate()'
        working-directory: lib/${{ inputs.subpackage }}
      - name: Train
        id: train
        run: |
          tmux new-session -d -s $TMUX_SESSION_NAME 'bash --rcfile=~/.bashrc ./scripts/train.sh > /tmp/${TMUX_SESSION_NAME}.log'
          timeout 7200 tail -f /tmp/$TMUX_SESSION_NAME.log || echo "Command finished with timeout"
          if tmux has-session -t $TMUX_SESSION_NAME 2>/dev/null; then
            echo "finished=false" >> "$GITHUB_OUTPUT"
          else
            echo "finished=true" >> "$GITHUB_OUTPUT"
          fi
        working-directory: lib/${{ inputs.subpackage }}
        env:
          JULIA_NUM_THREADS: auto
          MLFLOW_TRACKING_URI: http://mlflow.marcovela.com:6969/api
          MLFLOW_TRACKING_USERNAME: lightning
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_PASSWORD }}
          REPOSITORY_URL: https://github.com/${{ github.repository }}.git
          GPU_INFO: ${{ needs.create_instance.outputs.gpu_info }}
  cleanup:
    runs-on: [self-hosted, persistent]
    needs: [create_instance, train]
    environment: 
      name: ${{ needs.train.outputs.finished == 'false' && 'killer' || 'quick_shot' }}
    if: always()
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Destroy instance
        run: |
          pip install vastai==0.2.6
          vastai destroy instance "${{ needs.create_instance.outputs.instance_id }}" --api-key=${{ secrets.VAST_API_KEY }}
